[project]
name = "modos"
description = "SMOC Multi-Omics Digital Object System API"
authors = [
  { name = "Swiss Data Science Center", email = "contact@datascience.ch" },
]
license = { text = "Apache-2.0" }
license-files = ["LICEN[CS]E*"]
readme = "README.md"
requires-python = ">=3.11,<3.14"
dynamic = ["version"]
dependencies = [
    "calamus>=0.4.2,<0.5.0",
    "crypt4gh>=1.7,<2.0",
    "gtars>=0.2.2,<0.3.0",
    "loguru>=0.7.3",
    "modos-schema>=0.3.2",
    "pandas>=2.2.3,<3.0.0",
    "prompt-toolkit>=3.0.48,<4.0.0",
    "pydantic>=2.8.2,<3.0.0",
    "pysam>=0.22.0,<0.24.0",
    "pyteomics>=4.7.4,<5.0.0",
    "pyyaml>=6.0.1,<7.0.0",
    "rdflib>=6.3,<7.0",
    "s3fs>=2024.3.1,<2025.0.0",
    "typer[rich]>=0.7.0,<1.0.0",
    "click>=8.1.3,<8.2.0",
    "zarr>=2.16.1,<3.0.0",
]

[project.optional-dependencies]
pyfuzon = ["pyfuzon>=0.2,<0.3"]

[dependency-groups]
dev = [
  "ruff",
  "pre-commit",
  "pytest",
  "testcontainers[minio]",
]
docs = [
  "myst-parser>=2.0.0,<3.0",
  "sphinx>=7.2.6,<8.0",
  "pydata-sphinx-theme>=0.15.2,<1.0",
  "sphinx-click>=5.1.0,<6.0",
  "sphinx-autoapi>=3.0.0,<4.0",
  "sphinx-design>=0.5.0,<1.0",
]

[project.scripts]
modos = "modos.cli:cli"

[project.urls]
Homepage = "https://github.com/sdsc-ordes/modos-api"
Documentation = "https://sdsc-ordes.github.io/modos-api"
Issues = "https://github.com/sdsc-ordes/modos-api/issues"

[tool.ruff]
# Allow lambda functions
ignore = ["E731"]
line-length = 79

[tool.pytest.ini_options]
addopts = ["--doctest-modules"]
testpaths = ["modos", "tests"]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.version]
path = "src/modos/__init__.py"
pattern = '__version__ = "(?P<version>[^"]+)"'

[tool.hatch.build.targets.wheel]
packages = ["src/modos"]

[tool.git-cliff.changelog]
header = "Notable changes introduced in modos releases are documented in this file\n\n"
body = """

{% if version %}\
    ## [{{ version | trim_start_matches(pat="v") }}] - {{ timestamp | date(format="%Y-%m-%d") }}
{% else %}\
    ## [unreleased]
{% endif %}\
{% for group, commits in commits | group_by(attribute="group") %}
    ### {{ group | upper_first }}
    {% for commit in commits
    | filter(attribute="scope")
    | sort(attribute="scope") %}
        - *({{commit.scope}})* {{ commit.message }}
        {%- if commit.breaking %}
        {% raw %}  {% endraw %}- **BREAKING**: {{commit.breaking_description}}
        {%- endif -%}
    {%- endfor -%}
    {%- for commit in commits %}
        {%- if commit.scope -%}
        {% else -%}
            - {{ commit.message }}
            {% if commit.breaking -%}
            {% raw %}  {% endraw %}- **BREAKING**: {{commit.breaking_description}}
            {% endif -%}
        {% endif -%}
    {% endfor -%}
    {% raw %}\n{% endraw %}\
{% endfor %}\n
"""
footer = "<!--generated by git-cliff -->"

[tool.git-cliff.git]
conventional_commits = true
filter_commits = true
commit_parsers = [
    { message = "^feat", group = "Features" },
    { message = "^(fix|bug)", group = "Bug Fixes" },
    { message = "^doc", group = "Documentation" },
]

commit_preprocessors = [
    { pattern = 'Merged PR #[0-9]: (.*)', replace = "$1" },
    { pattern = " +", replace = " " },
]
